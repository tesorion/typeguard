# ENV['RBS_TEST_TARGET'] ||= 'Calc::*'
# require 'rbs/test/setup'
module Calc
  # _@param_ `lhs`
  # 
  # _@param_ `rhs`
  # 
  # _@return_ — Addition
  def sum: ((Integer | Float) lhs, (Integer | ::Array[(Integer | ::Array[Float])]) rhs) -> (Integer | Float)

  # _@return_ — Subtraction
  # 
  # _@note_ — Random text
  def sub: ((Integer | Float) lhs, (Integer | ::Array[(Integer | ::Array[Float])]) rhs) -> Float

  # _@return_ — nothing
  def priv: () -> void

  # _@param_ `k`
  # 
  # _@param_ `v`
  # 
  # _@return_ — o
  def dict: (Symbol k, ::Array[::Hash[untyped, untyped]] v) -> ::Hash[untyped, untyped]

  # sord infer - argument name in single @param inferred as "expression"
  # _@param_ `in`
  # 
  # _@return_ — out
  # 
  # _@note_ — The convention is actually Boolean, but that type does not exist.
  def truthy: (FalseClass expression) -> TrueClass
            
  self.@value: Hash[Symbol, Key]
            
end
